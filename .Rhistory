?state.abb
?datasets
exp
exp()
ln
exp(log()) + 1
getwd()
library(rPython)
install.packages("rserve")
install.packages("Rserve")
DIGITS = 0:9
sample(DIGITS, 5)
sample(DIGITS, 5)
sample(DIGITS, 5)
sample(DIGITS, 5)
sample(DIGITS, 5)
sample(DIGITS, 5)
sample(DIGITS, 5)
sample(DIGITS, 5)
sample(DIGITS, 5)
sample(DIGITS, 5)
library(httr)
?oauth_endpoint
install.packages("recommenderlab")
install.packages("RPostgreSQL")
library("RPostgreSQL", lib.loc="/Library/Frameworks/R.framework/Versions/3.0/Resources/library")
drv = dbDriver("PostgreSQL")
con = dbConnect(drv, user="brock", password="sparky")
con = dbConnect(drv, user="brock", password="sparky", dbname="sample")
con = dbConnect(drv, user="brock", password="sparky", dbname="postgres")
con = dbConnect(drv, user="postgres", password="sparky")
?predict
df
df
URL = "http://www.ats.ucla.edu/stat/data/binary.csv"
df = read.csv(URL)
yield_model = glm(admit ~  ., data=df, family=binomial())
summary(yield_model)
df = transform(df, score = predict(yield_model, newdata=df, type="response"))
head(df)
nrow(df)
hist(df)
hist(df$score)
hist(df$score,
xlab="Our Predicted Probability",
ylab="# of Students",
main="Distribution of Predicted Admit Probabilities",
color="red",
xlim = c(0,1))
hist(df$score,
xlab="Our Predicted Probability",
ylab="# of Students",
main="Distribution of Predicted Admit Probabilities",
color="red",
xlim = c(0,1),
breaks=10)
hist(df$score,
xlab="Our Predicted Probability",
ylab="# of Students",
main="Distribution of Predicted Admit Probabilities",
color="red",
xlim = c(0,1),
breaks=100)
hist(df$score,
xlab="Our Predicted Probability",
ylab="# of Students",
main="Distribution of Predicted Admit Probabilities",
color="red",
xlim = c(0,1),
breaks=10)
hist(df$score,
xlab="Our Predicted Probability",
ylab="# of Students",
main="Distribution of Predicted Admit Probabilities",
col ="red",
xlim = c(0,1),
breaks=10)
hist(df$score,
xlab="Our Predicted Probability",
ylab="# of Students",
main="Distribution of Predicted Admit Probabilities",
col ="red",
xlim = c(0,1),
breaks=25)
library(ggplot2)
ggplot(df, aes(x=score)) + geom_density()
ggplot(df, aes(x=score, fill=admit)) + geom_density()
ggplot(df, aes(x=score, fill=admit)) + geom_density()
ggplot(df, aes(x=score, fill=admit)) + geom_density(alpha=.3)
head(Df)
head(df)
ggplot(df, aes(x=score, fill=factor(admit)) + geom_density(alpha=.3))
ggplot(df, aes(x=score) ) + geom_density()
ggplot(df, aes(x=score, fill="admit" ) + geom_density()
)
ggplot(df, aes(x=score, fill=admit ) + geom_density()
)
ggplot(df, aes(x=score, fill=admit )) + geom_density()
head(df)
ggplot(df, aes(x=score, fill=factor(admit) )) + geom_density()
ggplot(df, aes(x=score, fill=factor(admit) )) + geom_density(alpha=.3)
library(ROCR)
install.packages("ROCR")
library(ROCR)
pred <- prediction(df$score, df$admit)
perf <- performance(pred, measure = "tpr", x.measure = "fpr")
plot(perf, col=rainbow(10))
plot(perf, col=rainbow(10), main="Lift Chart")
plot(perf, colorize=T, main="Lift Chart")
auc = performance(pred, 'auc')
names(auc)
class(auc)
auc
auc$y.values[[1]]
auc@y.values[[1]]
?cut
df = transform(df,
band = cut(score,
breaks = seq(0,1, .1),
right=FALSE))
head(df)
ddply(df, .(breaks), summarise,
applicants = length(admit),
admits = sum(admit),
admit_rate = mean(admit))
library(plyr)
ddply(df, .(breaks), summarise,
applicants = length(admit),
admits = sum(admit),
admit_rate = mean(admit))
?cut
df = transform(df,
band = cut(score,
band = seq(0,1, .1),
right=FALSE))
## create a summary table, by group, that looks at some summary stats for each band
ddply(df, .(band), summarise,
applicants = length(admit),
admits = sum(admit),
admit_rate = mean(admit))
load("N:/Enrollment Management/Enrollment Analytics/BRM/201409 - Finaid Print/finaid-mailing-data-final.Rdata")
ls()
with(pop2, table(ethn_code))
pop2 = subset(pop2, ethn_code != 'N')
save.image(file="finaid-mailing-data-final.Rdata")
with(pop2, table(ethn_code))
write.table(pop2$pidm, file="pidms-for-mailing.csv", sep=",", row.names=F)
nrow(pop2)
install_github("samatha", "rmflight")
library(devtools)
install_github("samatha", "rmflight")
library(samatha)
site <- "/dir1/dir2/dirSite"
skeleton(site)
site <- "mysite2"
skeleton(site)
setup_example_site(site)
samatha(site, rss = FALSE, initial = TRUE)
samatha(site, rss = FALSE, initial = TRUE)
run.server(site)  # open browser to localhost:8000 to see the site
with(urec, table(rsta, term))
###################################################################################
## Evaluate if the EMAIL Gene has any predictive value
## Evaluate the 201409 Recruit Pool pre-app BRM email activity
###################################################################################
## load the libraries
library(plyr)
library(stringr)
library(R2HTML)
library(reshape2)
library(lubridate)
## load the helper functions
source("R/email-gene.r")
## load the 2013 data
DDIR = "C:/Users/btibert/Desktop/Data-Mart/datasets"
urec = readRDS(file.path(DDIR, "urec.rds"))
comm = readRDS(file.path(DDIR, "comm.rds"))
library(XML)
URL = "http://search.yahoo.com/search?n=100&ei=UTF-8&va_vt=any&vo_vt=any&ve_vt=any&vp_vt=any&vf=all&vm=p&fl=0&fr=fp-top&p=undergrad+admission&vs=twitter.com"
library(RCurl)
page =  getURL(URL)
page = htmlParse(page)
xpathSApply(page, "//*/[class='res']/")
xpathSApply(page, "//*/[@class='res']/")
xpathSApply(page, '//*/[@class="res]/')
xpathSApply(page, '//*[@class="res]/')
xpathSApply(page, '//*[@class="res"]/')
xpathSApply(page, '//div[@class="res"]/')
xpathSApply(page, '//*/div[@class="res"]/')
xpathSApply(page, '//*/div[@class="res"]/text()')
xpathSApply(page, '//*/div[@class="res"]/href/')
xpathSApply(page, '//*/div[@class="res"]/href/text()')
xpathSApply(page, '//*/div[@class="res"]/h3/href/text()')
xpathSApply(page, '//*/div[@class="res"]/h3/href')
xpathSApply(page, '//*/div[@class="res"]/@content')
xpathSApply(page, '//*/div[@class="res"]/h3')
xpathSApply(page, '//*/div[@class="res"]/h3/')
xpathSApply(page, '//*/div[@class="res"]')
xpathSApply(page, '//*/div[@class="res"]/div[@class="abstr"]')
xpathSApply(page, '//*/div[@class="res"]/div[@class="abstr"]/text()')
xpathSApply(page, '//*/div[@class="res"]/div[@class="abstr"]/@content')
xpathSApply(page, '//*/div[@class="res"]/div[@class="abstr"]')
xpathSApply(page, '//*/div[@class="res"]')
xpathSApply(page, '//*/div[@class="res"]//@href')
links xpathSApply(page, '//*/div[@class="res"]//@href')
links = xpathSApply(page, '//*/div[@class="res"]//@href')
length(links)
links[1]
links[2]
links[3]
links[4]
links[5]
xpathSApply(page, '//*/div[@class="res"]/div[@class="abstr"]')
xpathSApply(page, '//*/div[@class="res"]/div[@class="abstr"]')
xpathSApply(page, '//*/div[@class="res"]')
links = xpathSApply(page, '//*/div[@class="res"]/a[@href]')
length(links)
head(links)
links = xpathSApply(page, '//*/div[@class="res"]/a[href]')
head(links)
xpathSApply(page, '//*/div[@class="res"]')
links = xpathSApply(page, '//*/div[@class="res"]/a[@class="href]')
links = xpathSApply(page, '//*/div[@class="res"]/a[@class="href"]')
head(links)
links = xpathSApply(page, '//*/div[@class="res"]//@href')
head(links)
library(RODBC)  # connect to databases
Sys.getenv("SPSS_USER")
ch_dw = odbcConnect("R_DW", Sys.getenv("DW_USER"), Sys.getenv("DW_PASS"))
ch_b = odbcConnect("R_BANNER", Sys.getenv("SPSS_USER"), Sys.getenv("SPSS_PASS"))
setwd("~/Dropbox/Projects/conversation-matrix")
library(RODBC)
## load the packages
library(RODBC)
ch = odbcConnect("R_DW", Sys.getenv("DW_USER"), Sys.getenv("DW_PASS"))
sqlColumns(ch, "BENTLEY.ZRVUREC")[3:5]
SQL = "SELECT ZRVUREC_PIDM,
COUNT DISTINCT (ZRVUREC_TERM_CODE) as count
FROM   BENTLEY.ZRVUREC
GROUP BY ZRVUREC_PIDM"
counts
counts = sqlQuery(ch, SQL, stringsAsFactors=F, as.is=T)
dim(counts)
counts
SQL = "SELECT ZRVUREC_PIDM,
COUNT (DISTINCT ZRVUREC_TERM_CODE) as count
FROM   BENTLEY.ZRVUREC
GROUP BY ZRVUREC_PIDM"
counts = sqlQuery(ch, SQL, stringsAsFactors=F, as.is=T)
dim(counts)
head(counts)
counts = subset(counts, COUNT == 1)
colnames(counts)
pidms = counts$ZRVUREC_PIDM
class(pidms)
head(pidms)
sqlColumns(ch, "BENTLEY.ZRVUREC")[3:5]
SQL = "SELECT  *
FROM    BENTLEY.ZRVUREC
WHERE   ZRVUREC_TERM_CODE = '201409' AND
ZRVUREC_RSTA_CODE = 'R' AND
ZRVUREC_STYP_CODE = 'F' AND
ZRVUREC_APP_IND = 'Y'"
recs = sqlQuery(ch, SQL, stringsAsFactors=F, as.is=T)
str(recs)
## get the data
SQL = "SELECT  *
FROM    BENTLEY.ZRVUREC
WHERE   ZRVUREC_TERM_CODE = '201309' AND
ZRVUREC_RSTA_CODE = 'R' AND
ZRVUREC_STYP_CODE = 'F' AND
ZRVUREC_APP_IND = 'Y'"
recs = sqlQuery(ch, SQL, stringsAsFactors=F, as.is=T)
dim(recs)
## get the data
SQL = "SELECT  *
FROM    BENTLEY.ZRVUREC
WHERE   ZRVUREC_TERM_CODE = '201409' AND
ZRVUREC_RSTA_CODE = 'R' AND
ZRVUREC_STYP_CODE = 'F' AND
ZRVUREC_APP_IND = 'N'"
recs = sqlQuery(ch, SQL, stringsAsFactors=F, as.is=T)
dim(recs)
recs = subset(recs, ZRVUREC_PIDM %in% pidms)
dim(recs)
table(recs$ZRVUREC_CTYP1_CCAT_CODE)
dataset
colnames(recs)
dataset = subset(recs,
select =c(ZRVUREC_ID,
ZRVUREC_FIRST_NAME,
ZRVUREC_LAST_NAME,
ZRVUREC_EMAIL))
names(dataset) = c("id", "firstname", "lastname", "email")
head(dataset)
help.start()
install.packages("ReportRs")
library(RODBC)
ch = odbcConnect("R_BANNER", Sys.getenv("BANNER_USER"), Sys.getenv("BANNER_PASS"))
SQL = "SELECT
DISTINCT SPRIDEN_PIDM
FROM   ZRVUREC, SPRIDEN, SRBRECR, GOREMAL
WHERE ZRVUREC_PIDM = SPRIDEN_PIDM and
ZRVUREC_PIDM = GOREMAL_PIDM and
ZRVUREC_PIDM = SRBRECR_PIDM and
ZRVUREC_TERM_CODE = SRBRECR_TERM_CODE and
ZRVUREC_TERM_CODE =:1 and
ZRVUREC_LEVL_CODE = 'UC' and
ZRVUREC_SESS_CODE='D' and
SRBRECR_RSTA_CODE = 'S' and
ZRVUREC_STYP_CODE = 'F' and
ZRVUREC_ADD_DATE >= '16-JAN-2014' and
ZRVUREC_ADD_DATE <= '24-FEB-2014' and
GOREMAL_PREFERRED_IND = 'Y' and
substr(ZRVUREC_CONTACT_STRING, 1, 3) IN ('PPN', 'SPN', 'APN','IPF') and
NOT EXISTS (SELECT 'x' FROM ZAVUUCD WHERE ZAVUUCD_PIDM = ZRVUREC_PIDM and
ZRVUREC_TERM_CODE= ZAVUUCD_TERM_CODE_ENTRY) and ZRVUREC_STYP_CODE = 'F' "
db
db = sqlQuery(ch, SQL, stringsAsFactors=F, as.is=T)
dim(db)
db
SQL = "SELECT
DISTINCT SPRIDEN_PIDM
FROM   ZRVUREC, SPRIDEN, SRBRECR, GOREMAL
WHERE ZRVUREC_PIDM = SPRIDEN_PIDM and
ZRVUREC_PIDM = GOREMAL_PIDM and
ZRVUREC_PIDM = SRBRECR_PIDM and
ZRVUREC_TERM_CODE = SRBRECR_TERM_CODE and
ZRVUREC_TERM_CODE = '201509' and
ZRVUREC_LEVL_CODE = 'UC' and
ZRVUREC_SESS_CODE='D' and
SRBRECR_RSTA_CODE = 'S' and
ZRVUREC_STYP_CODE = 'F' and
ZRVUREC_ADD_DATE >= '16-JAN-2014' and
ZRVUREC_ADD_DATE <= '24-FEB-2014' and
GOREMAL_PREFERRED_IND = 'Y' and
substr(ZRVUREC_CONTACT_STRING, 1, 3) IN ('PPN', 'SPN', 'APN','IPF') and
NOT EXISTS (SELECT 'x' FROM ZAVUUCD WHERE ZAVUUCD_PIDM = ZRVUREC_PIDM and
ZRVUREC_TERM_CODE= ZAVUUCD_TERM_CODE_ENTRY) and ZRVUREC_STYP_CODE = 'F' "
db = sqlQuery(ch, SQL, stringsAsFactors=F, as.is=T)
db
sqlColumns(ch, "ZRVUREC")[3:5]
load("C:/Users/btibert/Documents/Dropbox/Projects/cappex-crawl-mar14/parsed-datasets.Rdata")
library(RODBC)
ch = odbcConnect("R_DW", Sys.getenv("DW_USER"), Sys.getenv("DW_PASS"))
sqlTables(ch)
sqlTables(ch, "OWBTARGET")
sqlTables(ch, "OWBTARGET2")
sqlTables(ch, schema="OWBTARGET")
sqlTables(ch, schema="OWBTARGET2")
sqlTables(ch, schema="OWBTARGET")
library(XML)
library(plyr)
library(ggplot2)
library(reshape2)
URL = "http://www.hockey-reference.com/leagues/NHL_2014_skaters.html"
tables = readHTMLTable(URL, stringsAsFactors=F)
length(tables)
names(tables)
head(tables$stats)
nhl_14 = tables$stats
colnames(nhl_14) = tolower(colnames(nhl_14))
colnames(nhl_14)
nhl_14$rk = as.numeric(nhl_14$rk)
head(nhl_14)
head(nhl_14, 50)
nhl_14 = subset(nhl_14, !is.na(rk))
nhl_14 = subset(nhl_14, tm != 'Tm')
head(nhl_14, 50)
tail(nhl_14, 50)
tail(nhl_14, 75)
install.packages('devtools')
require(devtools)
install_github('shiny', 'rstudio')
require(shiny)
install_github('radiant','mostly-harmless')
runApp(system.file("marketing", package="radiant"))
library(RCurl)
library(XML)
PAGE = "http://www.payscale.com/college-roi/full-list"
raw_page = getURL(PAGE)
tbls = readHTMLTable(raw_page)
length(tbls)
tbls
tbl[2]
tbls[1]
tbls[[1]]
page_html = htmlParse(raw_page)
rm(tbls)
XPATH = '//*[@class="roi2014-group"]'
tbl = xpathSApply(page_html, XPATH)
names(tbl)
tbl[[1]]
tbl[[2]]
XPATH = '//*[@class="roi2014-results"]'
tbl = xpathSApply(page_html, XPATH)
length(tbl)
tbl[[1]]
devtools::install_github("d3Network", "christophergandrud")
library(d3Network)
load("~/Dropbox/Datasets/HigherEd/Cappex-March2014/parsed-datasets.Rdata")
head(network)
library(RCurl)
library(XML)
URL = "http://www.cappex.com/colleges/Bryant-University/admissions"
page = getURL(URL)
page_p = htmlParse(page)
names(page_p)
class(page_p)
tbls = readHTMLTable(page_p)
names(tbls)
tbls[[1]]
tbls[[2]]
tbls[[3]]
tbls[[4]]
tbls[[5]]
tbls[[2]]
tbls[[3]]
tbls = readHTMLTable(page_p, header==F)
tbls = readHTMLTable(page_p, header=FALSE)
tbls[[2]]
tbls[[3]]
tbls[[4]]
tbls[[5]]
library(d3Network)
load("~/Dropbox/Datasets/HigherEd/Cappex-August2013/edges-schools.Rdata")
ls()
head(edges)
dim(edges)
head(schools)
with(schools, hist(rating))
summary(schools$rating)
schools_f = subset(schools, rating >= 3.5)
dim(schools)
dim(schools_f)
head(edges)
edges_f = subset(edges, from %in% schools_f$unitid & to %in% schools_f$unitid)
dim(edges)
dim(edges_f)
head(schools_f)
head(edges_f)
d3ForceNetwork(Links=edges_f, Nodes=schools_f, Source="from", Target="to", Value="rank", NodeID="name")
?d3ForceNetwork
library(ReporteRs)
pptx_template = "~/Dropbox/Analytics/__TEMPLATES/Report Template 3.pptx"
doc = pptx( title = "title" )
names(doc)
doc[1]
doc[2]
dot[3]
doc[3]
doc[4]
slide.layouts(doc)
doc = addSlide( doc, slide.layout = "Title Slide" )
doc = addTitle( doc, "Presentation title" ) #set the main title
doc = addSubtitle( doc , "This document is generated with ReporteRs.")#set the sub-title
doc = addSlide( doc, slide.layout = "Two Content" )
doc = addTitle( doc, "Texts demo" ) #set the main title
texts = c( "Lorem ipsum dolor sit amet, consectetur adipiscing elit."
, "In sit amet ipsum tellus. Vivamus dignissim arcu sit amet faucibus auctor."
, "Quisque dictum tristique ligula."
)
# add simple text
doc = addParagraph( doc, value = texts)
library(XML)
library(RCurl)
Q =
Q
?format
QRY = sprintf("http://www.bing.com/search?q=undergrad+admission+twitter&first=%i", 0)
QRY
page = getURL(QRY)
doc = htmlParse(page)
links = unlist(doc['//@href'])
names(links) <- NULL
View(links)
library(stringr)
twitter_links = links[str_detect(links, "twitter.com")]
twitter_liks = unique(twitter_links)
twitter_links = unique(twitter_links)
twitter_links
library(d3Network)
Source <- c("A", "A", "A", "A", "B", "B", "C", "C", "D")
Target <- c("B", "C", "D", "J", "E", "F", "G", "H", "I")
NetworkData <- data.frame(Source, Target)
d3SimpleNetwork(NetworkData, width = 400, height = 250)
d3ForceNetwork
DDIR = "~/Dropbox/Analytics/DW/data"
list.files(DDIR)
apps = readRDS(file.path(DDIR, "uadm.rds"))
cont = readRDS(file.path(DDIR, "cont.rds"))
apps = subset(apps, term = '201409')
apps = subset(apps, term == '201409')
head(cont)
cont_a = subset(cont, pidm %in% apps$pidm)
head(cont_a)
devtools::install_github("rstudio/rticles")
install.packages("installr")
install.packages("installr")
install.packages("devtools")
devtools::install_github("klutometis/roxygen")
library(roxygen2)
?create
library(devtools)
?create
create("contactR")
library(roxygen2)
library(streamR)
setwd("~/github/nhl-shiny")
shiny::runApp()
shiny::runApp()
shiny::runApp()
