df$shotind = as.numeric(df$type %in% c('Shot','Goal'))
df$goalind[df$shotind==1] = as.numeric(df$type[df$shotind==1] == 'Goal')
return(df)
}
# fix the columns
df = fixCols(df)
## extract the shot type
shotType = function(x) {
require(stringr)
pattern = "[A-Za-z]+ Shot|Backhand|Tip-In|Wrap-Around|Deflection"
tmp = str_extract(x, pattern)
return(tmp)
}
df = transform(df, stype = shotType(df$desc))
df$stype = as.character(df$stype)
df$emptynet = NA
## return the data frame
return(df)
}
game_data = parsePBP(raw_pbp)
game_data
source("helpers.R")
game_raw = getPBP()
names(game_raw)
plays = parsePBP(game_raw)
plays = shotLOC(plays)
head(plays)
shotLoc
shotLOC
source("helpers.R")
plays = shotLOC(plays)
head(plays)
game_raw = c(game_raw, gameid= "2")
source("helpers.R")
## bring in the game
game_raw = getPBP()
## build the datasets
source("helpers.R")
plays = parsePBP(game_raw) ## parse the game events
head(plays)
source("helpers.R")
game_raw = getPBP()
## build the datasets
plays = parsePBP(game_raw) ## parse the game events
head(plays)
x = game_raw
tmp <- x$data$game
team = data.frame(awayteamid = tmp$awayteamid,
awayteamname = tmp$awayteamname,
awayteamnick = tmp$awayteamnick,
hometeamname = tmp$hometeamname,
hometeamnick = tmp$hometeamnick,
hometeamid = tmp$hometeamid,
gameid = tmp$,
stringsAsFactors=F)
team = data.frame(awayteamid = tmp$awayteamid,
awayteamname = tmp$awayteamname,
awayteamnick = tmp$awayteamnick,
hometeamname = tmp$hometeamname,
hometeamnick = tmp$hometeamnick,
hometeamid = tmp$hometeamid,
gameid = tmp$,
stringsAsFactors=F)
team = data.frame(awayteamid = tmp$awayteamid,
awayteamname = tmp$awayteamname,
awayteamnick = tmp$awayteamnick,
hometeamname = tmp$hometeamname,
hometeamnick = tmp$hometeamnick,
hometeamid = tmp$hometeamid,
gameid = tmp$gameid,
stringsAsFactors=F)
names(game_raw)
game_raw$gameid
team = data.frame(awayteamid = tmp$awayteamid,
awayteamname = tmp$awayteamname,
awayteamnick = tmp$awayteamnick,
hometeamname = tmp$hometeamname,
hometeamnick = tmp$hometeamnick,
hometeamid = tmp$hometeamid,
gameid = x$gameid,
stringsAsFactors=F)
source("helpers.R")
## bring in the game
game_raw = getPBP()
## build the datasets
plays = parsePBP(game_raw) ## parse the game events
plays = shotLOC(plays)
head(plays)
plays = transform(plays, angle = calcAngle(xcoord, ycoord, gx))
#### just playing with the data while the game is live
source("helpers.R")
## bring in the game
game_raw = getPBP()
############################
## build the datasets
############################
plays = parsePBP(game_raw) ## parse the game events
plays = shotLOC(plays) ## predicts shot location based on periods 1/3
# calculate the angle relative to the goal -- calc is +/- for the wing
plays = transform(plays, angle = calcAngle(xcoord, ycoord, gx))
## convert the shots to same half of ice and standardize the angle
plays = transform(plays,
xcoord_all = ifelse(gx == -89, -1*xcoord, xcoord),
ycoord_all = ifelse(gx == -89, -1*ycoord, ycoord),
angle_all = ifelse(angle < 0 , -1* angle, angle),
wing = ifelse(angle < 0 , "R", "L"),
styp2 = stype)
# time expired etc
plays = transform(plays, mins_expired = period * (minute(ms(time))+1))
library(lubridate)
library(lubridate)
install.packages("lubridate")
library(lubridate)
plays = transform(plays, mins_expired = period * (minute(ms(time))+1))
colnames(plays)
head(plays)
rink = readJPEG("www/rink.jpg", native=F)
g = ggplot(plays, aes(x=xcoord, y=ycoord))
g = g + annotation_raster(rink, -100, 100, -42.5, 42.5, interpolate=FALSE)
g = g + geom_point(aes(colour=factor(type), alpha=.65)
g = g + scale_colour_brewer(palette="Set1")
g + theme(
axis.line = element_blank(), axis.ticks = element_blank(),
axis.text.x = element_blank(), axis.text.y = element_blank(),
axis.title.x = element_blank(), axis.title.y = element_blank(),
legend.position = "none",
panel.background = element_blank(),
panel.border = element_blank(),
panel.grid.major = element_blank(),
panel.grid.minor = element_blank(),
plot.title = element_blank())
rink = readJPEG("www/rink.jpg", native=F)
require(jpeg)
library(ggplot2)
rink = readJPEG("www/rink.jpg", native=F)
g = ggplot(plays, aes(x=xcoord, y=ycoord))
g = g + annotation_raster(rink, -100, 100, -42.5, 42.5, interpolate=FALSE)
g = g + geom_point(aes(colour=factor(type), alpha=.65)
g = g + scale_colour_brewer(palette="Set1")
rink = readJPEG("www/rink.jpg", native=F)
g = ggplot(plays, aes(x=xcoord, y=ycoord))
g = g + annotation_raster(rink, -100, 100, -42.5, 42.5, interpolate=FALSE)
g = g + geom_point(aes(colour=factor(type), alpha=.65))
g = g + scale_colour_brewer(palette="Set1")
g + theme(
axis.line = element_blank(), axis.ticks = element_blank(),
axis.text.x = element_blank(), axis.text.y = element_blank(),
axis.title.x = element_blank(), axis.title.y = element_blank(),
legend.position = "none",
panel.background = element_blank(),
panel.border = element_blank(),
panel.grid.major = element_blank(),
panel.grid.minor = element_blank(),
plot.title = element_blank())
rink = readJPEG("www/rink.jpg", native=F)
g = ggplot(plays, aes(x=xcoord, y=ycoord))
g = g + annotation_raster(rink, -100, 100, -42.5, 42.5, interpolate=FALSE)
g = g + geom_point(aes(colour=factor(type)))
g = g + scale_colour_brewer(palette="Set1")
g + theme(
axis.line = element_blank(), axis.ticks = element_blank(),
axis.text.x = element_blank(), axis.text.y = element_blank(),
axis.title.x = element_blank(), axis.title.y = element_blank(),
legend.position = "none",
panel.background = element_blank(),
panel.border = element_blank(),
panel.grid.major = element_blank(),
panel.grid.minor = element_blank(),
plot.title = element_blank())
g + theme(
axis.line = element_blank(), axis.ticks = element_blank(),
axis.text.x = element_blank(), axis.text.y = element_blank(),
axis.title.x = element_blank(), axis.title.y = element_blank(),
#legend.position = "none",
panel.background = element_blank(),
panel.border = element_blank(),
panel.grid.major = element_blank(),
panel.grid.minor = element_blank(),
plot.title = element_blank())
rink = readJPEG("www/rink.jpg", native=F)
g = ggplot(plays, aes(x=xcoord, y=ycoord))
g = g + annotation_raster(rink, -100, 100, -42.5, 42.5, interpolate=FALSE)
g = g + geom_point(aes(colour=factor(type)))
g = g + scale_colour_brewer(palette="Dark2")
g + theme(
axis.line = element_blank(), axis.ticks = element_blank(),
axis.text.x = element_blank(), axis.text.y = element_blank(),
axis.title.x = element_blank(), axis.title.y = element_blank(),
#legend.position = "none",
panel.background = element_blank(),
panel.border = element_blank(),
panel.grid.major = element_blank(),
panel.grid.minor = element_blank(),
plot.title = element_blank())
rink = readJPEG("www/rink.jpg", native=F)
g = ggplot(plays, aes(x=xcoord, y=ycoord))
g = g + annotation_raster(rink, -100, 100, -42.5, 42.5, interpolate=FALSE)
g = g + geom_point(aes(colour=factor(type)), size=3)
g = g + scale_colour_brewer(palette="Dark2")
g + theme(
axis.line = element_blank(), axis.ticks = element_blank(),
axis.text.x = element_blank(), axis.text.y = element_blank(),
axis.title.x = element_blank(), axis.title.y = element_blank(),
#legend.position = "none",
panel.background = element_blank(),
panel.border = element_blank(),
panel.grid.major = element_blank(),
panel.grid.minor = element_blank(),
plot.title = element_blank())
rink = readJPEG("www/rink.jpg", native=F)
g = ggplot(plays, aes(x=xcoord, y=ycoord))
g = g + annotation_raster(rink, -100, 100, -42.5, 42.5, interpolate=FALSE)
g = g + geom_point(aes(colour=factor(type)), size=5)
g = g + scale_colour_brewer(palette="Dark2")
g + theme(
axis.line = element_blank(), axis.ticks = element_blank(),
axis.text.x = element_blank(), axis.text.y = element_blank(),
axis.title.x = element_blank(), axis.title.y = element_blank(),
#legend.position = "none",
panel.background = element_blank(),
panel.border = element_blank(),
panel.grid.major = element_blank(),
panel.grid.minor = element_blank(),
plot.title = element_blank())
rink = readJPEG("www/rink.jpg", native=F)
g = ggplot(plays, aes(x=xcoord, y=ycoord))
g = g + annotation_raster(rink, -100, 100, -42.5, 42.5, interpolate=FALSE)
g = g + geom_point(aes(colour=factor(type)), size=5, alpha=.8)
g = g + scale_colour_brewer(palette="Dark2")
g + theme(
axis.line = element_blank(), axis.ticks = element_blank(),
axis.text.x = element_blank(), axis.text.y = element_blank(),
axis.title.x = element_blank(), axis.title.y = element_blank(),
#legend.position = "none",
panel.background = element_blank(),
panel.border = element_blank(),
panel.grid.major = element_blank(),
panel.grid.minor = element_blank(),
plot.title = element_blank())
rink = readJPEG("www/rink.jpg", native=F)
g = ggplot(plays, aes(x=xcoord, y=ycoord))
g = g + annotation_raster(rink, -100, 100, -42.5, 42.5, interpolate=FALSE)
g = g + geom_point(aes(colour=factor(type)), size=5, alpha=.8)
g = g + scale_colour_brewer(palette="Dark2")
g + theme(
axis.line = element_blank(), axis.ticks = element_blank(),
axis.text.x = element_blank(), axis.text.y = element_blank(),
axis.title.x = element_blank(), axis.title.y = element_blank(),
legend.position = "top",
legend.title = element_blank(),
panel.background = element_blank(),
panel.border = element_blank(),
panel.grid.major = element_blank(),
panel.grid.minor = element_blank(),
plot.title = element_blank())
#### just playing with the data while the game is live
source("helpers.R")
## packages
library(lubridate)
require(jpeg)
library(ggplot2)
## bring in the game
game_raw = getPBP()
############################
## build the datasets
############################
plays = parsePBP(game_raw) ## parse the game events
plays = shotLOC(plays) ## predicts shot location based on periods 1/3
# calculate the angle relative to the goal -- calc is +/- for the wing
plays = transform(plays, angle = calcAngle(xcoord, ycoord, gx))
## convert the shots to same half of ice and standardize the angle
plays = transform(plays,
xcoord_all = ifelse(gx == -89, -1*xcoord, xcoord),
ycoord_all = ifelse(gx == -89, -1*ycoord, ycoord),
angle_all = ifelse(angle < 0 , -1* angle, angle),
wing = ifelse(angle < 0 , "R", "L"),
styp2 = stype)
# time expired etc
plays = transform(plays, mins_expired = period * (minute(ms(time))+1))
############################
## plot the events
############################
rink = readJPEG("www/rink.jpg", native=F)
g = ggplot(plays, aes(x=xcoord, y=ycoord))
g = g + annotation_raster(rink, -100, 100, -42.5, 42.5, interpolate=FALSE)
g = g + geom_point(aes(colour=factor(type)), size=5, alpha=.8)
g = g + scale_colour_brewer(palette="Dark2")
g + theme(
axis.line = element_blank(), axis.ticks = element_blank(),
axis.text.x = element_blank(), axis.text.y = element_blank(),
axis.title.x = element_blank(), axis.title.y = element_blank(),
legend.position = "top",
legend.title = element_blank(),
panel.background = element_blank(),
panel.border = element_blank(),
panel.grid.major = element_blank(),
panel.grid.minor = element_blank(),
plot.title = element_blank())
load("~/github/nhl-pbp/output/shot-model.Rdata")
plays = transform(plays, goal_prob = predict(shot_model, plays, type="response"))
head(plays)
plays$goal_prob[plays$shotind != 1] = NA
head(plays)
library(plyr)
plays = transform(plays, team_nick = ifelse(teamid = hometeamid, hometeamnick, awayteamnick))
plays = transform(plays, team_nick = ifelse(teamid==hometeamid, hometeamnick, awayteamnick))
head(plays)
ddply(plays, .(team_nick), summarise,
shots = sum(shotind),
goals = sum(goalind, na.rm=T),
exp_goals = sum(goal_prob, na.rm=T))
#### just playing with the data while the game is live
source("helpers.R")
## packages
library(lubridate)
require(jpeg)
library(ggplot2)
library(plyr)
## bring in the game
game_raw = getPBP()
############################
## build the datasets
############################
plays = parsePBP(game_raw) ## parse the game events
plays = shotLOC(plays) ## predicts shot location based on periods 1/3
# calculate the angle relative to the goal -- calc is +/- for the wing
plays = transform(plays, angle = calcAngle(xcoord, ycoord, gx))
## convert the shots to same half of ice and standardize the angle
plays = transform(plays,
xcoord_all = ifelse(gx == -89, -1*xcoord, xcoord),
ycoord_all = ifelse(gx == -89, -1*ycoord, ycoord),
angle_all = ifelse(angle < 0 , -1* angle, angle),
wing = ifelse(angle < 0 , "R", "L"),
styp2 = stype)
# time expired etc
plays = transform(plays, mins_expired = period * (minute(ms(time))+1))
# team nickname for each event
plays = transform(plays, team_nick = ifelse(teamid==hometeamid, hometeamnick, awayteamnick))
############################
## plot the events
############################
rink = readJPEG("www/rink.jpg", native=F)
g = ggplot(plays, aes(x=xcoord, y=ycoord))
g = g + annotation_raster(rink, -100, 100, -42.5, 42.5, interpolate=FALSE)
g = g + geom_point(aes(colour=factor(type)), size=5, alpha=.8)
g = g + scale_colour_brewer(palette="Dark2")
g + theme(
axis.line = element_blank(), axis.ticks = element_blank(),
axis.text.x = element_blank(), axis.text.y = element_blank(),
axis.title.x = element_blank(), axis.title.y = element_blank(),
legend.position = "top",
legend.title = element_blank(),
panel.background = element_blank(),
panel.border = element_blank(),
panel.grid.major = element_blank(),
panel.grid.minor = element_blank(),
plot.title = element_blank())
############################
## apply the shot model
############################
load("~/github/nhl-pbp/output/shot-model.Rdata")
plays = transform(plays, goal_prob = predict(shot_model, plays, type="response"))
plays$goal_prob[plays$shotind != 1] = NA
############################
## summarize the shot data
############################
ddply(plays, .(team_nick), summarise,
shots = sum(shotind),
goals = sum(goalind, na.rm=T),
exp_goals = sum(goal_prob, na.rm=T))
#### just playing with the data while the game is live
source("helpers.R")
## packages
library(lubridate)
require(jpeg)
library(ggplot2)
library(plyr)
## bring in the game
game_raw = getPBP()
############################
## build the datasets
############################
plays = parsePBP(game_raw) ## parse the game events
plays = shotLOC(plays) ## predicts shot location based on periods 1/3
# calculate the angle relative to the goal -- calc is +/- for the wing
plays = transform(plays, angle = calcAngle(xcoord, ycoord, gx))
## convert the shots to same half of ice and standardize the angle
plays = transform(plays,
xcoord_all = ifelse(gx == -89, -1*xcoord, xcoord),
ycoord_all = ifelse(gx == -89, -1*ycoord, ycoord),
angle_all = ifelse(angle < 0 , -1* angle, angle),
wing = ifelse(angle < 0 , "R", "L"),
styp2 = stype)
# time expired etc
plays = transform(plays, mins_expired = period * (minute(ms(time))+1))
# team nickname for each event
plays = transform(plays, team_nick = ifelse(teamid==hometeamid, hometeamnick, awayteamnick))
############################
## plot the events
############################
rink = readJPEG("www/rink.jpg", native=F)
g = ggplot(plays, aes(x=xcoord, y=ycoord))
g = g + annotation_raster(rink, -100, 100, -42.5, 42.5, interpolate=FALSE)
g = g + geom_point(aes(colour=factor(type)), size=5, alpha=.8)
g = g + scale_colour_brewer(palette="Dark2")
g + theme(
axis.line = element_blank(), axis.ticks = element_blank(),
axis.text.x = element_blank(), axis.text.y = element_blank(),
axis.title.x = element_blank(), axis.title.y = element_blank(),
legend.position = "top",
legend.title = element_blank(),
panel.background = element_blank(),
panel.border = element_blank(),
panel.grid.major = element_blank(),
panel.grid.minor = element_blank(),
plot.title = element_blank())
## TODO: think about hard coding the type as factors and
##       manually setting the colors
############################
## apply the shot model
############################
load("~/github/nhl-pbp/output/shot-model.Rdata")
plays = transform(plays, goal_prob = predict(shot_model, plays, type="response"))
plays$goal_prob[plays$shotind != 1] = NA
############################
## summarize the shot data
############################
ddply(plays, .(team_nick), summarise,
shots = sum(shotind),
goals = sum(goalind, na.rm=T),
exp_goals = sum(goal_prob, na.rm=T))
#### just playing with the data while the game is live
source("helpers.R")
## packages
library(lubridate)
require(jpeg)
library(ggplot2)
library(plyr)
## bring in the game
game_raw = getPBP()
############################
## build the datasets
############################
plays = parsePBP(game_raw) ## parse the game events
plays = shotLOC(plays) ## predicts shot location based on periods 1/3
# calculate the angle relative to the goal -- calc is +/- for the wing
plays = transform(plays, angle = calcAngle(xcoord, ycoord, gx))
## convert the shots to same half of ice and standardize the angle
plays = transform(plays,
xcoord_all = ifelse(gx == -89, -1*xcoord, xcoord),
ycoord_all = ifelse(gx == -89, -1*ycoord, ycoord),
angle_all = ifelse(angle < 0 , -1* angle, angle),
wing = ifelse(angle < 0 , "R", "L"),
styp2 = stype)
# time expired etc
plays = transform(plays, mins_expired = period * (minute(ms(time))+1))
# team nickname for each event
plays = transform(plays, team_nick = ifelse(teamid==hometeamid, hometeamnick, awayteamnick))
############################
## plot the events
############################
rink = readJPEG("www/rink.jpg", native=F)
g = ggplot(plays, aes(x=xcoord, y=ycoord))
g = g + annotation_raster(rink, -100, 100, -42.5, 42.5, interpolate=FALSE)
g = g + geom_point(aes(colour=factor(type)), size=5, alpha=.8)
g = g + scale_colour_brewer(palette="Dark2")
g + theme(
axis.line = element_blank(), axis.ticks = element_blank(),
axis.text.x = element_blank(), axis.text.y = element_blank(),
axis.title.x = element_blank(), axis.title.y = element_blank(),
legend.position = "top",
legend.title = element_blank(),
panel.background = element_blank(),
panel.border = element_blank(),
panel.grid.major = element_blank(),
panel.grid.minor = element_blank(),
plot.title = element_blank())
## TODO: think about hard coding the type as factors and
##       manually setting the colors
############################
## apply the shot model
############################
load("~/github/nhl-pbp/output/shot-model.Rdata")
plays = transform(plays, goal_prob = predict(shot_model, plays, type="response"))
plays$goal_prob[plays$shotind != 1] = NA
############################
## summarize the shot data
############################
ddply(plays, .(team_nick), summarise,
shots = sum(shotind),
goals = sum(goalind, na.rm=T),
exp_goals = sum(goal_prob, na.rm=T))
19 / 1.796
1.796 / 19
1.06 / 13
rink = readJPEG("www/rink.jpg", native=F)
g = ggplot(plays, aes(x=xcoord, y=ycoord))
g = g + annotation_raster(rink, -100, 100, -42.5, 42.5, interpolate=FALSE)
g = g + aes(shape = factor(team_nick))
g = g + geom_point(aes(colour=factor(type)), size=5, alpha=.8)
g = g + scale_colour_brewer(palette="Dark2")
g + theme(
axis.line = element_blank(), axis.ticks = element_blank(),
axis.text.x = element_blank(), axis.text.y = element_blank(),
axis.title.x = element_blank(), axis.title.y = element_blank(),
legend.position = "top",
legend.title = element_blank(),
panel.background = element_blank(),
panel.border = element_blank(),
panel.grid.major = element_blank(),
panel.grid.minor = element_blank(),
plot.title = element_blank())
